{"version":3,"sources":["images/robo.png","components/RoboPic.js","utils/getQueryStringParams.js","views/Login.js","components/Header.js","components/RobotCard.js","components/RoboListItem.js","components/RoboList.js","components/PopUpChallenge.js","components/PopUpGive.js","services/RobotService.js","views/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RoboPic","_ref","roboId","react_default","a","createElement","Image","src","concat","fit","getQueryStringParams","queryUrl","query","split","test","slice","reduce","params","param","_param$split","_param$split2","Object","slicedToArray","key","value","decodeURIComponent","replace","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","queryParams","queryStringParams","isClaimed","isClaiming","progress","setState","requiredQueryParams","_i","length","requiredParam","senderName","selectedEnsName","name","privateKey","signature","tokenAddress","tokenId","senderAddress","selectedName","universalLoginSdk","claimOnboardingLink","privateKeyNew","txHash","_checkTxHash","_startProgress","_this2","provider","once","tx","console","log","address","logs","topics","substr","setTimeout","onClickGo","error","_this3","_this4","Text","size","Box","align","Meter","values","color","pad","href","target","TextInput","onInput","event","onChangeName","_this5","justify","gap","height","_isUserInvited","animation","round","elevation","border","background","flex","Heading","_getClaimHeading","components_RoboPic","_getClaimMidSection","Button","onClick","_claim","disabled","primary","label","weight","robo","placeholder","Component","Header","tag","direction","level","margin","onClickLogout","RobotCard","basis","robot","id","textAlign","alignSelf","onClickChallenge","onClickGive","RoboListItem","width","onClickAttack","RoboList","robots","map","components_RoboListItem","opponentId","PopUpChallenge","Layer","onClickOutside","onClose","onEsc","overflow","components_RoboList","PopUpGive","fill","qrcode_react_lib_default","giveLink","react_copy_to_clipboard_lib_default","onCopy","text","RobotService","robotsContract","createClass","_robotsOf","asyncToGenerator","regenerator_default","mark","_callee","owner","numberOfRobots","i","wrap","_context","prev","next","balanceOf","sent","t0","tokenOfOwnerByIndex","t1","toString","push","abrupt","stop","_x","apply","arguments","_getAllRobots","_callee2","totalSupplyOfRobots","_context2","totalSupply","tokenByIndex","_ownerOf","_callee3","_context3","ownerOf","_x2","Home","isSelectOpponentModalOpen","isGiveModalOpen","myRobots","allRobots","loading","selectedRobo","roboService","contract","_updateRobos","interval","setInterval","clearInterval","robotsOf","identity","myRobotIds","_this$props","createOnboardingLink","config","frontend","getAllRobots","allRobotIds","_createGiveLink","copied","components_Header","onLogout","components_RobotCard","_openSelectOpponentModal","bind","_openGiveModal","components_PopUpChallenge","_closeModal","_attackOpponent","components_PopUpGive","_copyGiveLink","App","componentDidMount","sdk","start","view","providers","JsonRpcProvider","rpcProvider","EthereumIdentitySDK","relayer","robotsWarsContractAddress","robotsWarsContract","Contract","RobotsWars","abi","localStorage","getItem","JSON","parse","publicIP","ipAddress","browser","detect","iplocation","city","time","moment","format","os","version","ensName","_setIdentity","ensDomain","setItem","stringify","history","suggestion","removeItem","domain","_ref3","style","Route","exact","path","render","views_Home","_logout","Redirect","to","location","search","views_Login","_go","_changeName","ensSuggestions","_getNameSuggestions","onSelectSuggestion","_selectSuggestion","withRouter","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","BrowserRouter","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,m29GCUzBC,EAPC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OACdC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,IAAG,wBAAAC,OAA0BN,EAA1B,QACHO,IAAI,+BCOOC,EAbc,SAAAC,GAC3B,IAAMC,EAAQD,EAASE,MAAM,KAAK,GAClC,OAAOD,GACF,QAAQE,KAAKF,GAASA,EAAMG,MAAM,GAAKH,GACvCC,MAAM,KACNG,OAAO,SAACC,EAAQC,GAAU,IAAAC,EACND,EAAML,MAAM,KADNO,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACpBI,EADoBH,EAAA,GACfI,EADeJ,EAAA,GAGzB,OADAH,EAAOM,GAAOC,EAAQC,mBAAmBD,EAAME,QAAQ,MAAO,MAAQ,GAC/DT,GACN,IACH,IC4OSU,cA/Ob,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAAJ,IACjBE,EAAAR,OAAAW,EAAA,EAAAX,CAAAU,KAAAV,OAAAY,EAAA,EAAAZ,CAAAM,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACXC,YAAa1B,EAAqBkB,EAAMS,mBACxCC,WAAW,EACXC,YAAY,EACZC,SAAU,GANKX,mFAWjBE,KAAKU,SAAS,CACZL,YAAa1B,EAAqBqB,KAAKH,MAAMS,8DAa/C,IARA,IAAMK,EAAsB,CAC1B,aACA,YACA,eACA,UACA,gBACA,cAEFC,EAAA,EAAAA,EAA4BD,EAA5BE,OAAAD,IAAiD,CAA5C,IAAME,EAAiBH,EAAJC,GACtB,IAAKZ,KAAKI,MAAMC,YAAYS,GAC1B,OAAO,EAGX,OAAO,qCAKP,OADkBd,KAAKI,MAAMC,YAAYU,WACxBjC,MAAM,KAAK,+KAItBkC,EAAkBhB,KAAKH,MAAMoB,KAAO,iBAQtCjB,KAAKI,MAAMC,YANba,eACAC,cACAC,iBACAC,YACAN,eACAO,kBAEFtB,KAAKU,SAAS,CAAEF,YAAY,EAAMe,aAAcP,aACRhB,KAAKH,MAAM2B,kBAAkBC,oBACnEP,EACAC,EACAC,EACAC,EACAN,EACAO,sCANMI,OAAeC,OAQvB3B,KAAKU,SAAS,CAAEiB,WAChB3B,KAAK4B,aAAaF,GAClB1B,KAAK6B,yJAGMH,GAAe,IAAAI,EAAA9B,KAC1B,IACEA,KAAKH,MAAMkC,SAASC,KAAKhC,KAAKI,MAAMuB,OAAQ,SAACM,GAC3CC,QAAQC,IAAIF,GACZ,IAAMG,EAAU,KAAMH,EAAGI,KAAKJ,EAAGI,KAAKxB,OAAO,GAAGyB,OAAO,GAAGC,OAAO,GAAI,IACrEL,QAAQC,IAAIC,GACZI,WAAW,kBAAMV,EAAKjC,MAAM4C,UAAUX,EAAK1B,MAAMmB,aAAcG,EAAeU,IAAU,KACxFN,EAAKpB,SAAS,CAAEH,WAAW,MAE7B,MAAOmC,GACPR,QAAQC,IAAIO,GACZ1C,KAAKU,SAAS,CAAEgC,sDAKlB,OAAI1C,KAAKI,MAAMG,UACN,wBACEP,KAAKI,MAAMI,WACb,uBACGR,KAAKI,MAAMG,WAAcP,KAAKI,MAAMI,gBAAzC,EAEL,gEAIa,IAAAmC,EAAA3C,KACfwC,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,KAClD+B,WAAW,kBAAMG,EAAKjC,SAAS,CAAED,SAAU,MAAO,mDAG9B,IAAAmC,EAAA5C,KACpB,OAAIA,KAAKI,MAAMG,UAEXnC,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,UAAX,qCAIO9C,KAAKI,MAAMI,WAElBpC,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKC,MAAM,UACT5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CACEC,OAAQ,CAAC,CACPzD,MAAOO,KAAKI,MAAMK,SAClB0C,MAAO,cAGX/E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKK,IAAI,UACPhF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,SAAX,WACU1E,EAAAC,EAAAC,cAAA,KAAG+E,KAAI,mCAAA5E,OAAqCuB,KAAKI,MAAMuB,QAAU2B,OAAO,UAAxE,gBAKNtD,KAAKI,MAAMG,WAAcP,KAAKI,MAAMI,gBAAzC,EAEHpC,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKC,MAAM,UACT5E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKK,IAAI,UACPhF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,6CAIFzE,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CACEC,QAAS,SAACC,GAAD,OAAWb,EAAK/C,MAAM6D,aAAaD,EAAMH,OAAO7D,UAE3DrB,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKK,IAAI,SACPhF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,QAAQK,MAAM,SAAzB,uFASD,IAAAQ,EAAA3D,KACP,OACE5B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEa,QAAQ,SACRZ,MAAM,SACNI,IAAI,SACJS,IAAI,SACJC,OAAO,QAER9D,KAAK+D,iBACJ3F,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEiB,UAAU,SACVhB,MAAM,SACNiB,OAAK,EACLJ,IAAI,QACJK,UAAU,SACVC,OAAQ,CACNhB,MAAO,QACPL,KAAM,SAERc,QAAQ,UACRQ,WAAY,CAAEjB,MAAO,SACrBC,IAAI,QACJiB,MAAI,GAEJjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASxB,KAAK,QAAQK,MAAM,SACzBnD,KAAKuE,oBAERnG,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKiB,UAAU,SAASF,OAAO,SAC7B1F,EAAAC,EAAAC,cAACkG,EAAD,CAASrG,OAAQ6B,KAAKI,MAAMC,YAAYgB,WAEzCrB,KAAKyE,sBACJzE,KAAKI,MAAMG,WAAcP,KAAKI,MAAMI,WAOnC,KANDpC,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEC,QAAS,kBAAMhB,EAAKiB,UACpBC,UAAW7E,KAAKH,MAAMoB,KACtB6D,QAA6B,KAApB9E,KAAKH,MAAMoB,KACpB8D,MAAM,YAGV3G,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,SAAX,cACa1E,EAAAC,EAAAC,cAAA,KAAG+E,KAAK,wBAAwBC,OAAO,UAAvC,cAIflF,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEiB,UAAU,SACVhB,MAAM,SACNiB,OAAK,EACLJ,IAAI,QACJK,UAAU,SACVC,OAAQ,CACNhB,MAAO,QACPL,KAAM,SAERc,QAAQ,UACRQ,WAAY,CAAEjB,MAAO,SACrBC,IAAI,QACJiB,MAAI,GAEJjG,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKC,MAAM,UACT5E,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASxB,KAAK,SAASK,MAAM,SAA7B,aAGA/E,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,QAAQkC,OAAO,QAA1B,2CAIF5G,EAAAC,EAAAC,cAAA,OAAKE,IAAKyG,IAAMnB,OAAO,QACvB1F,EAAAC,EAAAC,cAACyE,EAAA,EAAD,KACE3E,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CACE2B,YAAY,kBACZ1B,QAAS,SAACC,GAAD,OAAWE,EAAK9D,MAAM6D,aAAaD,EAAMH,OAAO7D,UAE3DrB,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKK,IAAI,SACPhF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,QAAQK,MAAM,SAAzB,sDAKJ/E,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEC,QAAS,kBAAMhB,EAAK9D,MAAM4C,aAC1BoC,UAAW7E,KAAKH,MAAMoB,KACtB6D,QAA6B,KAApB9E,KAAKH,MAAMoB,KACpB8D,MAAM,UACN3B,IAAI,WAENhF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,SAAX,cACa1E,EAAAC,EAAAC,cAAA,KAAG+E,KAAK,wBAAwBC,OAAO,UAAvC,sBAvOH6B,aCmBLC,EAtBA,SAACvF,GAAD,OACbzB,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEsC,IAAI,SACJjB,WAAW,QACXhB,IAAI,QACJc,UAAU,QACVN,QAAQ,UACR0B,UAAU,MACVtC,MAAM,SACNqB,MAAM,GAENjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASiB,MAAO,EAAGC,OAAO,QACxBpH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEC,QAAS,kBAAM9E,EAAM4F,kBADvB,YC0BWC,EApCG,SAAC7F,GAAD,OAChBzB,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEoB,OAAQ,CAAEhB,MAAO,QAASL,KAAM,UAChCM,IAAI,QACJoC,OAAO,QACPtB,UAAU,SACVF,UAAU,SACV2B,MAAM,QAENvH,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKiB,UAAU,SAASF,OAAO,SAC7B1F,EAAAC,EAAAC,cAACkG,EAAD,CAASrG,OAAQ0B,EAAM+F,MAAMC,MAE/BzH,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CACEwB,UAAU,SACVhD,KAAK,SAEJjD,EAAM+F,MAAM3E,MAEf7C,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEuC,UAAU,iBACVzB,IAAI,SACJkC,UAAU,UAEV3H,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEK,MAAM,QACNJ,QAAS,kBAAM9E,EAAMmG,sBAEvB5H,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEK,MAAM,OACNJ,QAAS,kBAAM9E,EAAMoG,YAAYpG,EAAM+F,QACvCd,SAAO,gBCVAoB,EAvBM,SAACrG,GAAD,OACnBzB,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEuC,UAAU,iBACV1B,QAAQ,SACRO,OAAO,MACPF,OAAK,EACLH,OAAO,UAEP1F,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKoD,MAAM,SACT/H,EAAAC,EAAAC,cAACkG,EAAD,CAASrG,OAAQ0B,EAAMoF,KAAKY,MAE9BzH,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKC,MAAM,UACT5E,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,KAAK,SAASjD,EAAMoF,KAAKhE,MAC/B7C,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEI,SAAO,EACPH,QAAS,kBAAM9E,EAAMuG,cAAcvG,EAAMoF,KAAKY,MAFhD,aCDSQ,EAZE,SAAAnI,GAA+B,IAA5BoI,EAA4BpI,EAA5BoI,OAAQF,EAAoBlI,EAApBkI,cAC1B,OAAOE,EAAOC,IACZ,SAAAtB,GAAI,OACF7G,EAAAC,EAAAC,cAACkI,EAAD,CACEhH,IAAKyF,EAAKY,GACVZ,KAAMA,EACNmB,cAAe,SAACK,GAAD,OAAgBL,EAAcK,SCsBtCC,EA3BQ,SAAC7G,GAAD,OACrBzB,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACEnB,OAAO,QACPoB,eAAgB,kBAAM/G,EAAMgH,WAC5BC,MAAO,kBAAMjH,EAAMgH,YAEnBzI,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEoB,OAAQ,CAAEhB,MAAO,QAASL,KAAM,SAChCM,IAAI,QACJc,UAAU,SACV6C,SAAS,QAET3I,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASxB,KAAK,SAAd,qBAGA1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEgE,SAAS,UAET3I,EAAAC,EAAAC,cAAC0I,EAAD,CACEV,OAAQzG,EAAMyG,OACdF,cAAe,SAACK,GAAD,OAAgB5G,EAAMuG,cAAcK,8CC2B9CQ,EA9CG,SAACpH,GAAD,OAChBzB,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACEnB,OAAO,SACPoB,eAAgB,kBAAM/G,EAAMgH,WAC5BC,MAAO,kBAAMjH,EAAMgH,YAEnBzI,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEgE,SAAS,OACT5C,OAAQ,CAAEhB,MAAO,QAASL,KAAM,UAChCM,IAAI,QACJc,UAAU,SACVlB,MAAM,UAEN5E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEuC,UAAU,iBACVtC,MAAM,MACNkE,KAAK,cAEL9I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEK,MAAM,IACNJ,QAAS,kBAAM9E,EAAMgH,cAGzBzI,EAAAC,EAAAC,cAACkG,EAAD,CAASrG,OAAQ0B,EAAMoF,KAAKY,KAC5BzH,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CACEwB,UAAU,SACVP,MAAO,GAEN1F,EAAMoF,KAAKhE,MAEd7C,EAAAC,EAAAC,cAAC6I,EAAA9I,EAAD,CAAQyE,KAAM,IAAKrD,MAAOI,EAAMuH,WAChChJ,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKyC,OAAO,UACVpH,EAAAC,EAAAC,cAAC+I,EAAAhJ,EAAD,CACEiJ,OAAQ,kBAAMzH,EAAMyH,UACpBC,KAAM1H,EAAMuH,UAEZhJ,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACEI,SAAO,EACPC,MAAM,mBC1CLyC,EAAb,WACE,SAAAA,EAAYC,GAAiBnI,OAAAS,EAAA,EAAAT,CAAAU,KAAAwH,GAC3BxH,KAAKyH,eAAiBA,EAF1B,OAAAnI,OAAAoI,EAAA,EAAApI,CAAAkI,EAAA,EAAAhI,IAAA,WAAAC,MAAA,eAAAkI,EAAArI,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAAxJ,EAAAyJ,KAAA,SAAAC,EAKiBC,GALjB,IAAAC,EAAA3B,EAAA4B,EAAA,OAAAL,EAAAxJ,EAAA8J,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAMiCtI,KAAKyH,eAAec,UAAUP,GAN/D,OAMUC,EANVG,EAAAI,KAOUlC,EAAS,GACP4B,EAAI,EARhB,YAQmBA,EAAID,GARvB,CAAAG,EAAAE,KAAA,gBAAAF,EAAAK,GASMnC,EATN8B,EAAAE,KAAA,EASyBtI,KAAKyH,eAAeiB,oBAAoBV,EAAOE,GATxE,OAAAE,EAAAO,GAAAP,EAAAI,KAS4EI,WAT5ER,EAAAK,GASaI,KATb1I,KAAAiI,EAAAK,GAAAL,EAAAO,IAAA,QAQuCT,IARvCE,EAAAE,KAAA,uBAAAF,EAAAU,OAAA,SAWWxC,GAXX,yBAAA8B,EAAAW,SAAAhB,EAAA/H,SAAA,gBAAAgJ,GAAA,OAAArB,EAAAsB,MAAAjJ,KAAAkJ,YAAA,KAAA1J,IAAA,eAAAC,MAAA,eAAA0J,EAAA7J,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAAxJ,EAAAyJ,KAAA,SAAAsB,IAAA,IAAAC,EAAA/C,EAAA4B,EAAA,OAAAL,EAAAxJ,EAAA8J,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EAesCtI,KAAKyH,eAAe8B,cAf1D,OAeUF,EAfVC,EAAAd,KAgBUlC,EAAS,GACN4B,EAAI,EAjBjB,YAiBoBA,EAAImB,GAjBxB,CAAAC,EAAAhB,KAAA,gBAAAgB,EAAAb,GAkBMnC,EAlBNgD,EAAAhB,KAAA,EAkByBtI,KAAKyH,eAAe+B,aAAatB,GAlB1D,OAAAoB,EAAAX,GAAAW,EAAAd,KAkB8DI,WAlB9DU,EAAAb,GAkBaI,KAlBb1I,KAAAmJ,EAAAb,GAAAa,EAAAX,IAAA,QAiB6CT,IAjB7CoB,EAAAhB,KAAA,uBAAAgB,EAAAR,OAAA,SAoBWxC,GApBX,yBAAAgD,EAAAP,SAAAK,EAAApJ,SAAA,yBAAAmJ,EAAAF,MAAAjJ,KAAAkJ,YAAA,KAAA1J,IAAA,UAAAC,MAAA,eAAAgK,EAAAnK,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAAxJ,EAAAyJ,KAAA,SAAA4B,EAuBgB7D,GAvBhB,OAAAgC,EAAAxJ,EAAA8J,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAAb,OAAA,SAwBW9I,KAAKyH,eAAemC,QAAQ/D,IAxBvC,wBAAA8D,EAAAZ,SAAAW,EAAA1J,SAAA,gBAAA6J,GAAA,OAAAJ,EAAAR,MAAAjJ,KAAAkJ,YAAA,MAAA1B,EAAA,WCwIesC,eAhIb,SAAAA,EAAYjK,GAAO,IAAAC,EAAA,OAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAA8J,IACjBhK,EAAAR,OAAAW,EAAA,EAAAX,CAAAU,KAAAV,OAAAY,EAAA,EAAAZ,CAAAwK,GAAA3J,KAAAH,KAAMH,KACDO,MAAQ,CACX2J,2BAA2B,EAC3BC,iBAAiB,EACjBC,SAAU,GACVC,UAAW,GACXC,SAAS,EACT/C,SAAU,GACVgD,aAAc,IAEhBtK,EAAKuK,YAAc,IAAI7C,EAAa1H,EAAKD,MAAMyK,UAX9BxK,sMAejBE,KAAKuK,eACLvK,KAAKwK,SAAWC,YAAY,kBAAM3I,EAAKyI,gBAAgB,sJAIvDG,cAAc1K,KAAKwK,iLAIMxK,KAAKqK,YAAYM,SAAS3K,KAAKH,MAAM+K,SAASxI,gBAAjEyI,SACAZ,EAAWY,EACdtE,IAAI,SAACV,GAAD,MAAS,CACZA,GAAIA,EACJ5E,KAAI,QAAAxC,OAAUoH,MAElB7F,KAAKU,SAAS,CAAEuJ,WAAWE,SAAS,IACpCjI,QAAQC,IAAI,6JAGI,IAAA2I,EACwB9K,KAAKH,MAArC+K,EADQE,EACRF,SAAUpJ,EADFsJ,EACEtJ,kBACZJ,EAAepB,KAAKH,MAAMyK,SAASlI,QACnCf,EAAUrB,KAAKI,MAAMgK,aAAavE,GAClCuB,EAAW5F,EAAkBuJ,qBAAlB,GAAAtM,OACZuM,EAAOC,SADK,WAEfL,EAAS1J,WACT0J,EAAS3J,KACT2J,EAASxI,QACThB,EACAC,GAEFrB,KAAKU,SAAS,CACZsJ,iBAAiB,EACjB5C,gMAKwBpH,KAAKqK,YAAYa,aAAalL,KAAKH,MAAM+K,SAASxI,gBAAtE+I,SACAjB,EAAYiB,EACf5E,IAAI,SAAAV,GAAE,MAAK,CACVA,KACA5E,KAAI,QAAAxC,OAAUoH,MAElB7F,KAAKU,SAAS,CACZqJ,2BAA2B,EAC3BG,wJAIYzD,GACdvE,QAAQC,IAAI,SAAUsE,0CAGT2D,GAAc,IAAAzH,EAAA3C,KAC3BA,KAAKU,SAAS,CAAE0J,gBAAgB,WAC9BzH,EAAKyI,4DAKPpL,KAAKU,SAAS,CAAE2K,QAAQ,0CAIxBrL,KAAKU,SAAS,CACZqJ,2BAA2B,EAC3BC,iBAAiB,qCAIZ,IAAApH,EAAA5C,KACP,OACE5B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,KACE3E,EAAAC,EAAAC,cAACgN,EAAD,CAAQ7F,cAAezF,KAAKH,MAAM0L,WAClCnN,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKK,IAAI,UACPhF,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASiB,MAAM,KAAf,UACUvF,KAAKH,MAAM+K,SAAS3J,KAD9B,KAGA7C,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAASiB,MAAM,KACbnH,EAAAC,EAAAC,cAAA,KAAG+E,KAAI,wCAAA5E,OAA0CuB,KAAKH,MAAM+K,SAASxI,UAAYpC,KAAKH,MAAM+K,SAASxI,UAEtGpC,KAAKI,MAAM+J,SAAW,oBACvB/L,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKuC,UAAW,iBAAiB6C,MAAI,GAClCnI,KAAKI,MAAM6J,SAAS1D,IAAI,SAAAX,GAAK,OAC5BxH,EAAAC,EAAAC,cAACkN,EAAD,CACEhM,IAAKoG,EAAMC,GACXD,MAAOA,EACPI,iBAAkBpD,EAAK6I,yBAAyBC,KAAK9I,GACrDqD,YAAarD,EAAK+I,eAAeD,KAAK9I,SAK7C5C,KAAKI,MAAM2J,2BACV3L,EAAAC,EAAAC,cAACsN,EAAD,CACE/E,QAAS7G,KAAK6L,YAAYH,KAAK1L,MAC/BsG,OAAQtG,KAAKI,MAAM8J,UACnB9D,cAAepG,KAAK8L,gBAAgBJ,KAAK1L,QAG5CA,KAAKI,MAAM4J,iBACV5L,EAAAC,EAAAC,cAACyN,EAAD,CACE9G,KAAMjF,KAAKI,MAAMgK,aACjBhD,SAAUpH,KAAKI,MAAMgH,SACrBE,OAAQtH,KAAKgM,cAAcN,KAAK1L,MAChC6G,QAAS7G,KAAK6L,YAAYH,KAAK1L,gBA1HxBmF,gCCMb8G,eACJ,SAAAA,IAAc,IAAAnM,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAAiM,IACZnM,EAAAR,OAAAW,EAAA,EAAAX,CAAAU,KAAAV,OAAAY,EAAA,EAAAZ,CAAA2M,GAAA9L,KAAAH,QAmBFkM,kBApBc5M,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAAxJ,EAAAyJ,KAoBM,SAAAC,IAAA,OAAAF,EAAAxJ,EAAA8J,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEVxI,EAAKqM,IAAIC,QAFC,OAAAhE,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAIhBlG,QAAQC,IAARiG,EAAAK,IAJgB,wBAAAL,EAAAW,SAAAhB,EAAA/H,KAAA,YAlBlBF,EAAKM,MAAQ,CACXiM,KAAM,QACNpL,KAAM,IAERnB,EAAKiC,SAAW,IAAIuK,YAAUC,gBAAgBvB,EAAOwB,aACrD1M,EAAKqM,IAAM,IAAIM,IAAoBzB,EAAO0B,QAAS5M,EAAKiC,UACxDjC,EAAK6M,0BAA4B,6CACjC7M,EAAK8M,mBAAqB,IAAIC,WAC5B/M,EAAK6M,0BACLG,GAAWC,IACXjN,EAAKiC,UAEP,IAAM6I,EAAWoC,aAAaC,QAAQ,YAd1B,OAeRrC,IACF9K,EAAK8K,SAAWsC,KAAKC,MAAMvC,IAhBjB9K,+MA8BYsN,4BAAlBC,SACAC,EAAUC,4BACOC,IAAWH,0BAA1BI,2BACD,CACLJ,YACApM,KAAMqM,EAAQrM,KACdwM,OACAC,KAAMC,MAASC,OAAO,QACtBC,GAAIP,EAAQO,GACZC,QAASR,EAAQQ,gLAIXC,EAAS7M,EAAYkB,yEACxB2L,EAUH/N,KAAKgO,aAAa,CAChB/M,KAAM8M,EACN3L,UACAlB,eAXgB,uBADZ+M,EAAYjO,KAAKI,MAAMa,KAAO,kBAElCjB,KAAK4K,SAAW,CACd3J,KAAMgN,EACN/M,WAAY,qEACZkB,QAAS,+CAUf4K,aAAakB,QAAQ,WAAYhB,KAAKiB,UAAUnO,KAAK4K,WACrD5K,KAAKH,MAAMuO,QAAQvF,KAAK,gJAwBd5H,GACVjB,KAAKU,SAAS,CAAEO,mDAGAoN,GAChBrO,KAAKU,SAAS,CACZO,KAAMoN,EAAWvP,MAAM,KAAK,uCAK9BkO,aAAasB,WAAW,YACxBtO,KAAK4K,SAAW,KAChB5K,KAAKU,SAAS,CAACkK,SAAU5K,KAAK4K,yDAGV,IAAA9I,EAAA9B,KAEpB,OAAIA,KAAKI,MAAMa,KADI,CAAC,eAEAsF,IAAI,SAAAgI,GAAM,SAAA9P,OAAOqD,EAAK1B,MAAMa,KAAlB,KAAAxC,OAA0B8P,KAEjD,2CAIPvO,KAAKH,MAAMuO,QAAQvF,KAAK,6CAGkB,IAA7B5H,EAA6BuN,EAA7BvN,KAAMmB,EAAuBoM,EAAvBpM,QAASlB,EAAcsN,EAAdtN,WAC5BlB,KAAK4K,SAAW,CACd3J,OACAmB,UACAlB,+CAIK,IAAAyB,EAAA3C,KACP,OACE5B,EAAAC,EAAAC,cAAA,OAAKmQ,MAAO,CAAE3K,OAAQ,SACpB1F,EAAAC,EAAAC,cAACoQ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACLlM,EAAKiI,SAGJxM,EAAAC,EAAAC,cAACwQ,GAAD,CACElE,SAAUjI,EAAKiI,SACfpJ,kBAAmBmB,EAAKwJ,IACxBK,YAAa7J,EAAKZ,SAClBuI,SAAU3H,EAAKiK,mBACfrB,SAAU5I,EAAKoM,QAAQrD,KAAK/I,KAP9BvE,EAAAC,EAAAC,cAAC0Q,EAAA,EAAD,CAAUC,GAAG,cAYnB7Q,EAAAC,EAAAC,cAACoQ,EAAA,EAAD,CACEE,KAAK,UACLC,OAAQ,kBAAMzQ,EAAAC,EAAAC,cAAC0Q,EAAA,EAAD,CAAUC,GAAE,SAAAxQ,OAAWkE,EAAK9C,MAAMqP,SAASC,aAE3D/Q,EAAAC,EAAAC,cAACoQ,EAAA,EAAD,CACEE,KAAK,SACLC,OAAQ,kBACNzQ,EAAAC,EAAAC,cAAC8Q,EAAD,CACE9O,kBAAmBqC,EAAK9C,MAAMqP,SAASC,OACvC1M,UAAWE,EAAK0M,IAAI3D,KAAK/I,GACzBe,aAAcf,EAAK2M,YAAY5D,KAAK/I,GACpC4M,eAAgB5M,EAAK6M,sBACrBC,mBAAoB9M,EAAK+M,kBAAkBhE,KAAK/I,GAChDiI,SAAUjI,EAAKiI,SACfpJ,kBAAmBmB,EAAKwJ,IACxBpK,SAAUY,EAAKZ,SACfd,KAAM0B,EAAKvC,MAAMa,kBA9JbkE,aAuKHwK,eAAW1D,IC5KpB2D,GAAcC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrQ,QACf+P,UAAUC,cAAcQ,WAK1B1O,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB0O,MAAM,SAAAnO,GACLR,QAAQQ,MAAM,4CAA6CA,KCxEjEoO,IAASjC,OACPzQ,EAAAC,EAAAC,cAACyS,EAAA,EAAD,KACE3S,EAAAC,EAAAC,cAAC0S,GAAD,OAEFC,SAASC,eAAe,SDSX,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBtB,OAAOZ,UAC3CmC,SAAWvB,OAAOZ,SAASmC,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAzR,OAAM2S,GAAN,sBAEPxB,IAiDV,SAAiCM,GAE/BqB,MAAMrB,GACHI,KAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,KAAK,SAAAC,GACjCA,EAAauB,aAAaxB,KAAK,WAC7BR,OAAOZ,SAAS6C,aAKpB9B,GAAgBC,KAGnBW,MAAM,WACL3O,QAAQC,IACN,mEArEA6P,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvB,KAAK,WACjCpO,QAAQC,IACN,+GAMJ8N,GAAgBC,MCnCxB+B","file":"static/js/main.11d9d146.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robo.19f6a20b.png\";","import React from 'react';\nimport { Image } from 'grommet'\n\nconst RoboPic = ({ roboId }) => (\n  <Image\n    src={`https://robohash.org/${roboId}.png`}\n    fit='contain'\n  />\n)\n\nexport default RoboPic\n","const getQueryStringParams = queryUrl => {\n  const query = queryUrl.split('?')[1]\n  return query\n    ? (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        let [key, value] = param.split('=');\n        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n        return params;\n      }, {})\n    : {}\n};\n\nexport default getQueryStringParams","import React, { Component } from 'react'\nimport { Box, TextInput, Heading, Text, Button, Meter } from 'grommet'\nimport RoboPic from '../components/RoboPic'\nimport robo from '../images/robo.png'\nimport getQueryStringParams from '../utils/getQueryStringParams'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      queryParams: getQueryStringParams(props.queryStringParams),\n      isClaimed: false,\n      isClaiming: false,\n      progress: 0\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      queryParams: getQueryStringParams(this.props.queryStringParams)\n    })\n  }\n\n  _isUserInvited() {\n    const requiredQueryParams = [\n      'privateKey',\n      'signature',\n      'tokenAddress',\n      'tokenId',\n      'senderAddress',\n      'senderName'\n    ]\n    for (const requiredParam of requiredQueryParams) {\n      if (!this.state.queryParams[requiredParam]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _getName() {\n    const ensDomain = this.state.queryParams.senderName\n    return ensDomain.split('.')[0]\n  }\n\n  async _claim() {\n    const selectedEnsName = this.props.name + '.tenz-id.xyz'\n    const {\n      privateKey,\n      signature,\n      tokenAddress,\n      tokenId,\n      senderName,\n      senderAddress\n    } = this.state.queryParams\n    this.setState({ isClaiming: true, selectedName: selectedEnsName })\n    const [ privateKeyNew, txHash ] = await this.props.universalLoginSdk.claimOnboardingLink(\n      privateKey,\n      signature,\n      tokenAddress,\n      tokenId,\n      senderName,\n      senderAddress\n    )\n    this.setState({ txHash })\n    this._checkTxHash(privateKeyNew)\n    this._startProgress()\n  }\n\n  _checkTxHash(privateKeyNew) {\n    try {\n      this.props.provider.once(this.state.txHash, (tx) => {\n        console.log(tx)\n        const address = '0x'+ tx.logs[tx.logs.length-1].topics[2].substr(26, 66)\n        console.log(address)\n        setTimeout(() => this.props.onClickGo(this.state.selectedName, privateKeyNew, address), 2000)\n        this.setState({ isClaimed: true })\n      }) \n    } catch (error) {\n      console.log(error)\n      this.setState({ error })\n    }\n  }\n\n  _getClaimHeading() {\n    if (this.state.isClaimed) {\n      return 'Robot ready for fight'\n    } else if (this.state.isClaiming) {\n      return 'Almost fit for fight'\n    } else if (!this.state.isClaimed && !this.state.isClaiming) {\n      // return `You received a robot from ${this._getName()}`\n      return `You received a robot`\n    }\n  }\n\n  _startProgress() {\n    setTimeout(() => this.setState({ progress: 10 }), 1000)\n    setTimeout(() => this.setState({ progress: 15 }), 2000)\n    setTimeout(() => this.setState({ progress: 23 }), 3000)\n    setTimeout(() => this.setState({ progress: 25 }), 4000)\n    setTimeout(() => this.setState({ progress: 30 }), 5000)\n    setTimeout(() => this.setState({ progress: 70 }), 7000)\n    setTimeout(() => this.setState({ progress: 90 }), 10000)\n  }\n\n  _getClaimMidSection() {\n    if (this.state.isClaimed) {\n      return (\n        <Text size='medium'>\n          Congratulations to your new robot\n        </Text>\n      )\n    } else if (this.state.isClaiming) {\n      return (\n        <Box align='center'>\n          <Meter\n            values={[{\n              value: this.state.progress,\n              color: '#7D4CDB'\n            }]}\n          />\n          <Box pad='medium'>\n            <Text size='small'>\n              View on <a href={`https://ropsten.etherscan.io/tx/${this.state.txHash}`} target='_blank'>etherscan</a>\n            </Text>\n          </Box>\n        </Box>\n      )\n    } else if (!this.state.isClaimed && !this.state.isClaiming) {\n      return (\n        <Box align='center'>\n          <Box pad='medium'>\n            <Text>\n              Enter your username to check it out\n            </Text>\n          </Box>\n          <TextInput\n            onInput={(event) => this.props.onChangeName(event.target.value)}\n          />\n          <Box pad='small'>\n            <Text size='small' color='brand'>\n              Tip: Your username gives you access to all dapps\n            </Text>\n          </Box>\n        </Box>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <Box\n        justify=\"center\"\n        align=\"center\"\n        pad=\"xlarge\"\n        gap=\"medium\"\n        height='full'\n      >\n      {this._isUserInvited() ? (\n        <Box\n          animation=\"fadeIn\"\n          align=\"center\"\n          round\n          gap=\"small\"\n          elevation=\"medium\"\n          border={{\n            color: 'brand',\n            size: 'small'\n          }}\n          justify='between'\n          background={{ color: 'white' }}\n          pad='large'\n          flex\n        >\n          <Heading size='small' color='brand'>\n            {this._getClaimHeading()}\n          </Heading>\n          <Box animation=\"fadeIn\" height=\"small\">\n            <RoboPic roboId={this.state.queryParams.tokenId} />\n          </Box>\n          {this._getClaimMidSection()}\n          {!this.state.isClaimed && !this.state.isClaiming ? (\n            <Button\n              onClick={() => this._claim()}\n              disabled={!this.props.name}\n              primary={this.props.name !== ''}\n              label='Confirm'\n            />\n          ): null}\n          <Text size='small'>\n            Powered by <a href='https://robohash.org/' target='_blank'>Robohash</a>\n          </Text>\n        </Box>\n      ) : ( \n        <Box\n          animation=\"fadeIn\"\n          align=\"center\"\n          round\n          gap=\"small\"\n          elevation=\"medium\"\n          border={{\n            color: 'brand',\n            size: 'small'\n          }}\n          justify='between'\n          background={{ color: 'white' }}\n          pad='large'\n          flex\n        >\n          <Box align='center'>\n            <Heading size='medium' color='brand'>\n              Onbotting\n            </Heading>\n            <Text size='large' weight='bold'>\n              Fight & share robots with your friends\n            </Text>\n          </Box>\n          <img src={robo} height='200' />\n          <Box>\n            <TextInput\n              placeholder=\"Enter your name\"\n              onInput={(event) => this.props.onChangeName(event.target.value)}\n            />\n            <Box pad='small'>\n              <Text size='small' color='brand'>\n                Tip: Your username gives you access to all dapps\n              </Text>\n            </Box>\n          </Box>\n          <Button\n            onClick={() => this.props.onClickGo()}\n            disabled={!this.props.name}\n            primary={this.props.name !== ''}\n            label='Confirm'\n            pad='medium'\n          />\n          <Text size='small'>\n            Powered by <a href='https://robohash.org/' target='_blank'>Robohash</a>\n          </Text>\n        </Box>\n      )}\n      </Box>\n    )\n  }\n}\n\nexport default Login\n","import React from 'react';\nimport { Box, Heading, Button } from 'grommet';\n\nconst Header = (props) => (\n  <Box\n    tag='header'\n    background='brand'\n    pad='small'\n    elevation='small'\n    justify='between'\n    direction='row'\n    align='center'\n    flex={false}\n  >\n    <Heading level={3} margin='none'>\n      <strong>Robo Wars</strong>\n    </Heading>\n    <Button\n      onClick={() => props.onClickLogout()}\n    >\n      Logout\n    </Button>\n  </Box>\n);\n\nexport default Header;","import React from 'react'\nimport { Box, Heading, Button } from 'grommet'\nimport { Deploy, Gift } from 'grommet-icons'\n\nimport RoboPic from '../components/RoboPic'\n\n\nconst RobotCard = (props) => (\n  <Box\n    border={{ color: 'brand', size: 'medium' }}\n    pad='large'\n    margin='small'\n    elevation='medium' \n    animation='fadeIn'\n    basis='auto'\n  >\n    <Box animation=\"fadeIn\" height=\"small\">\n      <RoboPic roboId={props.robot.id} />\n    </Box>\n    <Heading\n      textAlign='center'\n      size='small'\n    >\n      {props.robot.name}\n    </Heading>\n    <Box\n      direction='row-responsive'\n      gap='medium'\n      alignSelf='center'\n    >\n      <Button\n        label='Fight'\n        onClick={() => props.onClickChallenge()}\n      />\n      <Button\n        label='Give'\n        onClick={() => props.onClickGive(props.robot)}\n        primary\n      />\n    </Box>\n  </Box>\n);\n\nexport default RobotCard;","import React from 'react'\nimport { Box, Text, Button } from 'grommet'\nimport RoboPic from './RoboPic'\n\nconst RoboListItem = (props) => (\n  <Box\n    direction='row-responsive'\n    justify='center'\n    border='all'\n    round\n    height='medium'\n  >\n    <Box width='small'>\n      <RoboPic roboId={props.robo.id} />\n    </Box>\n    <Box align='center'>\n      <Text size='large'>{props.robo.name}</Text>\n      <Button\n        primary\n        onClick={() => props.onClickAttack(props.robo.id)}\n      >\n        Attack\n      </Button>\n    </Box>\n  </Box>\n)\n\nexport default RoboListItem\n","import React from 'react'\n\nimport RoboListItem from './RoboListItem'\n\nconst RoboList = ({ robots, onClickAttack }) => {\n  return robots.map(\n    robo => (\n      <RoboListItem\n        key={robo.id}\n        robo={robo}\n        onClickAttack={(opponentId) => onClickAttack(opponentId)}\n      />\n    )\n  )\n}\n\nexport default RoboList\n","import React from 'react'\nimport { Box, Layer, Heading } from 'grommet'\n\nimport RoboList from './RoboList'\n\nconst PopUpChallenge = (props) => (\n  <Layer\n    margin='large'\n    onClickOutside={() => props.onClose()}\n    onEsc={() => props.onClose()}\n  >\n    <Box\n      border={{ color: 'brand', size: 'large' }}\n      pad='large'\n      elevation='medium'\n      overflow='auto'\n    >\n      <Heading size='small'>\n        Select a opponent\n      </Heading>\n      <Box\n        overflow='scroll'\n      >\n        <RoboList\n          robots={props.robots}\n          onClickAttack={(opponentId) => props.onClickAttack(opponentId)}\n        />\n      </Box>\n    </Box>\n  </Layer>\n)\n\nexport default PopUpChallenge\n","import React from 'react'\nimport { Box, Layer, Heading, Button } from 'grommet'\nimport QRCode from 'qrcode.react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport RoboPic from '../components/RoboPic'\n\nconst PopUpGive = (props) => (\n  <Layer\n    margin='medium'\n    onClickOutside={() => props.onClose()}\n    onEsc={() => props.onClose()}\n  >\n    <Box\n      overflow='auto'\n      border={{ color: 'brand', size: 'medium' }}\n      pad='large'\n      elevation='medium' \n      align='center'\n    >\n      <Box\n        direction='row-responsive'\n        align='end'\n        fill='horizontal'\n      >\n        <Button\n          label='X'\n          onClick={() => props.onClose()}\n        />\n      </Box>\n      <RoboPic roboId={props.robo.id} />\n      <Heading\n        textAlign='center'\n        level={1}\n      >\n        {props.robo.name}\n      </Heading> \n      <QRCode size={240} value={props.giveLink} />\n      <Box margin='medium'>\n        <CopyToClipboard\n          onCopy={() => props.onCopy()}\n          text={props.giveLink}\n        >\n          <Button\n            primary\n            label='Copy link'\n          />\n        </CopyToClipboard>\n      </Box>\n    </Box>\n  </Layer>\n);\n\nexport default PopUpGive;","\n\nexport class RobotService {\n  constructor(robotsContract) {\n    this.robotsContract = robotsContract\n  }\n\n  async robotsOf(owner) {\n    const numberOfRobots = await this.robotsContract.balanceOf(owner)\n    const robots = []\n    for(let i = 0; i < numberOfRobots; i++) {\n      robots.push((await this.robotsContract.tokenOfOwnerByIndex(owner, i)).toString())\n    }\n    return robots\n  }\n\n  async getAllRobots() {\n    const totalSupplyOfRobots = await this.robotsContract.totalSupply()\n    const robots = []\n    for (let i = 0; i < totalSupplyOfRobots; i++) {\n      robots.push((await this.robotsContract.tokenByIndex(i)).toString())\n    }\n    return robots\n  }\n\n  async ownerOf(id) {\n    return this.robotsContract.ownerOf(id)  \n  }\n}\n","import React, { Component } from 'react';\nimport { Box, Heading } from 'grommet';\nimport Header from '../components/Header';\nimport RobotCard from '../components/RobotCard';\nimport PopUpChallenge from '../components/PopUpChallenge';\nimport PopUpGive from '../components/PopUpGive'\nimport { RobotService } from '../services/RobotService'\nimport config from '../config'\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSelectOpponentModalOpen: false,\n      isGiveModalOpen: false,\n      myRobots: [],\n      allRobots: [],\n      loading: true,\n      giveLink: '',\n      selectedRobo: ''\n    }\n    this.roboService = new RobotService(this.props.contract)\n  }\n\n  async componentDidMount() {\n    this._updateRobos()\n    this.interval = setInterval(() => this._updateRobos(), 5000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  async _updateRobos() {\n    const myRobotIds = await this.roboService.robotsOf(this.props.identity.address)\n    const myRobots = myRobotIds\n      .map((id) => ({\n        id: id,\n        name: `Robo ${id}`\n      }))\n    this.setState({ myRobots , loading: false})\n    console.log('Updated robos')\n  }\n\n  _createGiveLink() {\n    const { identity, universalLoginSdk } = this.props\n    const tokenAddress = this.props.contract.address\n    const tokenId = this.state.selectedRobo.id\n    const giveLink = universalLoginSdk.createOnboardingLink(\n      `${config.frontend}/invite`,\n      identity.privateKey,\n      identity.name,\n      identity.address,\n      tokenAddress,\n      tokenId\n    )\n    this.setState({\n      isGiveModalOpen: true,\n      giveLink\n    })\n  }\n\n  async _openSelectOpponentModal() {\n    const allRobotIds = await this.roboService.getAllRobots(this.props.identity.address)\n    const allRobots = allRobotIds\n      .map(id => ({\n        id,\n        name: `Robo ${id}`\n      }))\n    this.setState({\n      isSelectOpponentModalOpen: true,\n      allRobots\n    })\n  }\n\n  _attackOpponent(opponentId) {\n    console.log('ATTACK', opponentId)\n  }\n\n  _openGiveModal(selectedRobo) {\n    this.setState({ selectedRobo }, () => {\n      this._createGiveLink()\n    })\n  }\n\n  _copyGiveLink(){\n    this.setState({ copied: true });\n  }\n\n  _closeModal() {\n    this.setState({\n      isSelectOpponentModalOpen: false,\n      isGiveModalOpen: false\n    })\n  }\n\n  render() {\n    return (\n      <Box>\n        <Header onClickLogout={this.props.onLogout} />\n        <Box pad=\"medium\">\n          <Heading level=\"3\">\n            Hello  {this.props.identity.name}!\n          </Heading>\n          <Heading level=\"4\">\n            <a href={`https://ropsten.etherscan.io/address/${this.props.identity.address}`}>{this.props.identity.address}</a>\n          </Heading>\n          {this.state.loading && \"Loading Robots...\"}\n          <Box direction= 'row-responsive' wrap>\n            {this.state.myRobots.map(robot=> (\n              <RobotCard\n                key={robot.id}\n                robot={robot}\n                onClickChallenge={this._openSelectOpponentModal.bind(this)}\n                onClickGive={this._openGiveModal.bind(this)}\n              />\n            ))}\n          </Box>\n        </Box>\n        {this.state.isSelectOpponentModalOpen && (\n          <PopUpChallenge\n            onClose={this._closeModal.bind(this)}\n            robots={this.state.allRobots}\n            onClickAttack={this._attackOpponent.bind(this)}\n          />\n        )}\n        {this.state.isGiveModalOpen && (\n          <PopUpGive\n            robo={this.state.selectedRobo}\n            giveLink={this.state.giveLink}\n            onCopy={this._copyGiveLink.bind(this)}              \n            onClose={this._closeModal.bind(this)}\n          />\n        )}\n      </Box>\n    )\n  }\n}\nexport default Home\n","import React, { Component } from 'react'\nimport EthereumIdentitySDK from 'universal-login-monorepo/universal-login-sdk'\nimport { providers, Contract } from 'ethers'\nimport publicIP from 'react-native-public-ip'\nimport { detect } from 'detect-browser'\nimport iplocation from 'iplocation'\nimport moment from 'moment'\nimport { Route, Redirect, withRouter } from 'react-router-dom'\n\nimport Login from './views/Login'\nimport Home from './views/Home'\nimport './App.css'\nimport RobotsWars from './contracts/Robots.json'\nimport config from './config.json'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      view: 'login',\n      name: ''\n    }\n    this.provider = new providers.JsonRpcProvider(config.rpcProvider)\n    this.sdk = new EthereumIdentitySDK(config.relayer, this.provider)\n    this.robotsWarsContractAddress = '0xc545cc75415e397fa3e52e90f738d11e485ce69b'\n    this.robotsWarsContract = new Contract(\n      this.robotsWarsContractAddress,\n      RobotsWars.abi,\n      this.provider\n    )\n    const identity = localStorage.getItem(\"identity\")\n    if (identity) {\n      this.identity = JSON.parse(identity)\n    }\n  }\n\n  componentDidMount = async () => {\n    try {\n      await this.sdk.start()\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Login View functions\n  async _getLabel() {\n    const ipAddress = await publicIP()\n    const browser = detect()\n    const { city } = await iplocation(ipAddress)\n    return {\n      ipAddress,\n      name: browser.name,\n      city,\n      time: moment().format('h:mm'),\n      os: browser.os,\n      version: browser.version\n    }\n  }\n\n  async _go(ensName, privateKey, address) {\n    if (!ensName) {\n      const ensDomain = this.state.name + '.tenz-id.xyz'\n      if (ensDomain === 'alice.tenz-id.xyz') {\n        this.identity = {\n          name: ensDomain,\n          privateKey: '0x34C09F237DCAA085C301D5148E024B9F04E8FC5603EE3B6E08C39AFE789E423A',\n          address: '0x502a1d30edb6e51261eedfcb41f6626c29ee6adc'/*'0x498208d7b2f695bd3f0162fcae6678253f819c2f'*/\n        }\n      }\n    } else {\n      this._setIdentity({\n        name: ensName,\n        address,\n        privateKey\n      })\n    }\n    localStorage.setItem('identity', JSON.stringify(this.identity))\n    this.props.history.push('/')\n    // try {\n    //   const identityAddress = await this.sdk.identityExist(ensDomain)\n    //   if (identityAddress) {\n    //     const privateKey = await this.sdk.connect(identityAddress, await this._getLabel())\n    //     this.identity = {\n    //       name: ensDomain,\n    //       privateKey,\n    //       address: identityAddress\n    //     }\n    //   } else {\n    //     const [ privateKey, address ] = await this.sdk.create(ensDomain)\n    //     this.identity = {\n    //       name: ensDomain,\n    //       privateKey,\n    //       address\n    //     }\n    //   }\n    //   this.props.history.push('/')\n    // } catch (error) {\n    //   console.error(error)\n    // }\n  }\n\n  _changeName(name) {\n    this.setState({ name })\n  }\n\n  _selectSuggestion(suggestion) {\n    this.setState({\n      name: suggestion.split('.')[0]\n    })\n  }\n\n  _logout() {\n    localStorage.removeItem('identity')\n    this.identity = null\n    this.setState({identity: this.identity})\n  }\n\n  _getNameSuggestions() {\n    const ensDomains = ['tenz-id.xyz']\n    if (this.state.name) {\n      return ensDomains.map(domain => `${this.state.name}.${domain}`)\n    }\n    return []\n  }\n\n  _navigateHome() {\n    this.props.history.push('/')\n  }\n\n  _setIdentity({ name, address, privateKey }) {\n    this.identity = {\n      name,\n      address,\n      privateKey\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%' }}>\n        <Route\n          exact\n          path='/'\n          render={() => (\n            !this.identity ? (\n              <Redirect to='/login'/>\n            ) : (\n              <Home\n                identity={this.identity}\n                universalLoginSdk={this.sdk}\n                rpcProvider={this.provider}\n                contract={this.robotsWarsContract}\n                onLogout={this._logout.bind(this)}\n              />\n            )\n          )}\n        />\n        <Route\n          path='/invite'\n          render={() => <Redirect to={`/login${this.props.location.search}`} />}\n        />\n        <Route\n          path='/login'\n          render={() =>\n            <Login\n              queryStringParams={this.props.location.search}\n              onClickGo={this._go.bind(this)}\n              onChangeName={this._changeName.bind(this)}\n              ensSuggestions={this._getNameSuggestions()}\n              onSelectSuggestion={this._selectSuggestion.bind(this)}\n              identity={this.identity}\n              universalLoginSdk={this.sdk}\n              provider={this.provider}\n              name={this.state.name}\n            />\n          }\n        />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}