{"version":3,"sources":["images/robo.png","components/RoboPic.js","utils/getQueryStringParams.js","views/Login.js","components/Header.js","components/RobotCard.js","components/RoboListItem.js","components/RoboList.js","components/PopUpChallenge.js","components/PopUpGive.js","services/RobotService.js","views/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RoboPic","_ref","roboId","react_default","a","createElement","Image","src","concat","fit","getQueryStringParams","queryUrl","query","split","test","slice","reduce","params","param","_param$split","_param$split2","Object","slicedToArray","key","value","decodeURIComponent","replace","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","queryParams","queryStringParams","generatingRobot","isClaimed","setState","requiredQueryParams","_i","length","requiredParam","senderName","selectedName","privateKey","signature","tokenAddress","tokenId","senderAddress","isClaiming","universalLoginSdk","claimOnboardingLink","privateKeyNew","txHash","_checkTxHash","_this2","provider","once","tx","console","log","address","logs","topics","substr","setTimeout","onClickGo","error","_getName","Text","href","target","_this3","Box","direction","justify","align","pad","gap","height","_isUserInvited","animation","basis","background","color","round","elevation","Heading","size","_getClaimHeading","components_RoboPic","_getClaimText","TextInput","placeholder","onInput","event","onChangeName","suggestions","ensSuggestions","onSelect","_ref3","suggestion","_claim","border","robo","Button","onClick","disabled","isNameSet","primary","label","Component","Header","tag","flex","level","margin","onClickLogout","RobotCard","robot","id","textAlign","name","alignSelf","onClickChallenge","icon","Deploy","onClickGive","Gift","RoboListItem","width","onClickAttack","RoboList","robots","map","components_RoboListItem","opponentId","PopUpChallenge","Layer","onClickOutside","onClose","onEsc","overflow","components_RoboList","PopUpGive","fill","qrcode_react_lib_default","giveLink","react_copy_to_clipboard_lib_default","onCopy","text","RobotService","robotsContract","createClass","_robotsOf","asyncToGenerator","regenerator_default","mark","_callee","owner","numberOfRobots","i","wrap","_context","prev","next","balanceOf","sent","t0","tokenOfOwnerByIndex","t1","toString","push","abrupt","stop","_x","apply","arguments","_getAllRobots","_callee2","totalSupplyOfRobots","_context2","totalSupply","tokenByIndex","_ownerOf","_callee3","_context3","ownerOf","_x2","Home","isSelectOpponentModalOpen","isGiveModalOpen","myRobots","allRobots","loading","selectedRobo","roboService","contract","_updateRobos","interval","setInterval","clearInterval","robotsOf","identity","myRobotIds","_this$props","createOnboardingLink","config","frontend","getAllRobots","allRobotIds","_createGiveLink","copied","_this4","components_Header","onLogout","components_RobotCard","_openSelectOpponentModal","bind","_openGiveModal","components_PopUpChallenge","_closeModal","_attackOpponent","components_PopUpGive","_copyGiveLink","App","componentDidMount","sdk","start","view","providers","JsonRpcProvider","rpcProvider","EthereumIdentitySDK","relayer","robotsWarsContractAddress","robotsWarsContract","Contract","RobotsWars","abi","localStorage","getItem","JSON","parse","publicIP","ipAddress","browser","detect","iplocation","city","time","moment","format","os","version","ensName","_setIdentity","ensDomain","setItem","stringify","history","removeItem","domain","style","Route","exact","path","render","views_Home","_logout","Redirect","to","location","search","views_Login","_go","_changeName","_getNameSuggestions","onSelectSuggestion","_selectSuggestion","withRouter","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","BrowserRouter","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0ab03a88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robo.ffc3cbf8.png\";","import React from 'react';\nimport { Image } from 'grommet'\n\nconst RoboPic = ({ roboId }) => (\n  <Image\n    src={`https://robohash.org/${roboId}.png`}\n    fit='contain'\n  />\n)\n\nexport default RoboPic\n","const getQueryStringParams = queryUrl => {\n  const query = queryUrl.split('?')[1]\n  return query\n    ? (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        let [key, value] = param.split('=');\n        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n        return params;\n      }, {})\n    : {}\n};\n\nexport default getQueryStringParams","import React, { Component } from 'react'\nimport { Box, TextInput, Heading, Text, Button } from 'grommet'\nimport { User } from 'grommet-icons'\n\nimport RoboPic from '../components/RoboPic'\nimport robo from '../images/robo.png'\nimport getQueryStringParams from '../utils/getQueryStringParams'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      queryParams: getQueryStringParams(props.queryStringParams),\n      generatingRobot: false,\n      isClaimed: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      queryParams: getQueryStringParams(this.props.queryStringParams)\n    })\n  }\n\n  _isUserInvited() {\n    const requiredQueryParams = [\n      'privateKey',\n      'signature',\n      'tokenAddress',\n      'tokenId',\n      'senderAddress',\n      'senderName'\n    ]\n    for (const requiredParam of requiredQueryParams) {\n      if (!this.state.queryParams[requiredParam]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _getName() {\n    const ensDomain = this.state.queryParams.senderName\n    return ensDomain.split('.')[0]\n  }\n\n  async _claim(selectedName) {\n    const {\n      privateKey,\n      signature,\n      tokenAddress,\n      tokenId,\n      senderName,\n      senderAddress\n    } = this.state.queryParams\n    this.setState({ isClaiming: true, selectedName: selectedName })\n    const [ privateKeyNew, txHash ] = await this.props.universalLoginSdk.claimOnboardingLink(\n      privateKey,\n      signature,\n      tokenAddress,\n      tokenId,\n      senderName,\n      senderAddress\n    )\n    this.setState({ txHash })\n    this._checkTxHash(privateKeyNew)\n  }\n\n  _checkTxHash(privateKeyNew) {\n    try {\n      this.props.provider.once(this.state.txHash, (tx) => {\n        console.log(tx)\n        const address = '0x'+ tx.logs[tx.logs.length-1].topics[2].substr(26, 66)\n        console.log(address)\n        setTimeout(() => this.props.onClickGo(this.state.selectedName, privateKeyNew, address), 2000)\n        this.setState({ isClaimed: true })\n      }) \n    } catch (error) {\n      console.log(error)\n      this.setState({ error })\n    }\n  }\n\n  _getClaimHeading() {\n    if (this.state.isClaimed) {\n      return 'Successfully claimed your gift!'\n    } else if (this.state.isClaiming) {\n      return 'Robot being claimed...'\n    } else if (!this.state.isClaimed && !this.state.isClaiming) {\n      return `${this._getName()} sent you a gift!`\n    }\n  }\n\n  _getClaimText() {\n    if (this.state.isClaimed) {\n      return (\n        <Text>\n          Congratulations to your new robot! Check your tx on <a href={`https://ropsten.etherscan.io/tx/${this.state.txHash}`} target='_blank'>etherscan</a>\n        </Text>\n      )\n    } else if (this.state.isClaiming) {\n      return (\n        <Text>\n          Check your tx on <a href={`https://ropsten.etherscan.io/tx/${this.state.txHash}`} target='_blank'>etherscan</a>\n        </Text>\n      )\n    } else if (!this.state.isClaimed && !this.state.isClaiming) {\n      return (\n        <Text>Enter your name and click button to claim your gift.</Text>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <Box\n        direction=\"row-responsive\"\n        justify=\"center\"\n        align=\"center\"\n        pad=\"xlarge\"\n        gap=\"medium\"\n        height='full'\n      >\n      {this._isUserInvited() ? (\n        <Box\n          animation='fadeIn'\n          basis=\"large\"\n          pad=\"large\"\n          align=\"center\"\n          background={{ color: 'white' }}\n          round\n          gap=\"large\"\n          elevation=\"medium\"\n        >\n          <Heading size=\"small\">\n            {this._getClaimHeading()}\n          </Heading>\n          <Box animation=\"fadeIn\" height=\"small\">\n            <RoboPic roboId={this.state.queryParams.tokenId} />\n          </Box>\n          {this._getClaimText()}\n          <TextInput\n            placeholder=\"Enter a name\"\n            onInput={(event) => this.props.onChangeName(event.target.value)}\n            suggestions={this.props.ensSuggestions}\n            onSelect={({ suggestion }) => this._claim(suggestion)}\n          />\n        </Box>\n      ) : ( \n        <Box\n          animation=\"fadeIn\"\n          basis='1/3'\n          height='large'\n          pad='large'\n          align=\"center\"\n          round\n          gap=\"large\"\n          elevation=\"medium\"\n          border={{\n            color: 'brand',\n            size: 'medium'\n          }}\n          justify='between'\n          background={{ color: 'white' }}\n        >\n          <Box align='center'>\n            <Heading size=\"small\">\n              Robo Wars\n            </Heading>\n            <Text size='medium'>\n              Win, Collect and Give Robots\n            </Text>\n          </Box>\n          <img src={robo} />\n          <Box pad='large'>\n            <TextInput\n              placeholder=\"Enter your name\"\n              onInput={(event) => this.props.onChangeName(event.target.value)}\n            />\n          </Box>\n          <Button\n            onClick={() => this.props.onClickGo()}\n            disabled={!this.props.isNameSet}\n            primary={this.props.isNameSet}\n            label='Login'\n          />\n        </Box>\n      )}\n      </Box>\n    )\n  }\n}\n\nexport default Login\n","import React from 'react';\nimport { Box, Heading, Button } from 'grommet';\n\nconst Header = (props) => (\n  <Box\n    tag='header'\n    background='brand'\n    pad='small'\n    elevation='small'\n    justify='between'\n    direction='row'\n    align='center'\n    flex={false}\n  >\n    <Heading level={3} margin='none'>\n      <strong>Robo Wars</strong>\n    </Heading>\n    <Button\n      onClick={() => props.onClickLogout()}\n    >\n      Logout\n    </Button>\n  </Box>\n);\n\nexport default Header;","import React from 'react'\nimport { Box, Heading, Button } from 'grommet'\nimport { Deploy, Gift } from 'grommet-icons'\n\nimport RoboPic from '../components/RoboPic'\n\n\nconst RobotCard = (props) => (\n  <Box\n    border={{ color: 'brand', size: 'medium' }}\n    pad='large'\n    margin='small'\n    elevation='medium' \n    animation='fadeIn'\n    basis='auto'\n  >\n    <RoboPic roboId={props.robot.id} />\n    <Heading\n      textAlign='center'\n      level={1}\n    >\n      {props.robot.name}\n    </Heading>\n    <Box\n      direction='row-responsive'\n      gap='medium'\n      alignSelf='center'\n    >\n      <Button\n        label='Challenge'\n        onClick={() => props.onClickChallenge()}\n        icon={<Deploy />}\n      />\n      <Button\n        label='Give'\n        onClick={() => props.onClickGive(props.robot)}\n        primary\n        icon={<Gift />}\n      />\n    </Box>\n  </Box>\n);\n\nexport default RobotCard;","import React from 'react'\nimport { Box, Text, Button } from 'grommet'\nimport RoboPic from './RoboPic'\n\nconst RoboListItem = (props) => (\n  <Box\n    direction='row-responsive'\n    justify='center'\n    border='all'\n    round\n    height='medium'\n  >\n    <Box width='small'>\n      <RoboPic roboId={props.robo.id} />\n    </Box>\n    <Box align='center'>\n      <Text size='large'>{props.robo.name}</Text>\n      <Button\n        primary\n        onClick={() => props.onClickAttack(props.robo.id)}\n      >\n        Attack\n      </Button>\n    </Box>\n  </Box>\n)\n\nexport default RoboListItem\n","import React from 'react'\n\nimport RoboListItem from './RoboListItem'\n\nconst RoboList = ({ robots, onClickAttack }) => {\n  return robots.map(\n    robo => (\n      <RoboListItem\n        key={robo.id}\n        robo={robo}\n        onClickAttack={(opponentId) => onClickAttack(opponentId)}\n      />\n    )\n  )\n}\n\nexport default RoboList\n","import React from 'react'\nimport { Box, Layer, Heading } from 'grommet'\n\nimport RoboList from './RoboList'\n\nconst PopUpChallenge = (props) => (\n  <Layer\n    margin='large'\n    onClickOutside={() => props.onClose()}\n    onEsc={() => props.onClose()}\n  >\n    <Box\n      border={{ color: 'brand', size: 'large' }}\n      pad='large'\n      elevation='medium'\n      overflow='auto'\n    >\n      <Heading size='small'>\n        Select a opponent\n      </Heading>\n      <Box\n        overflow='scroll'\n      >\n        <RoboList\n          robots={props.robots}\n          onClickAttack={(opponentId) => props.onClickAttack(opponentId)}\n        />\n      </Box>\n    </Box>\n  </Layer>\n)\n\nexport default PopUpChallenge\n","import React from 'react'\nimport { Box, Layer, Heading, Button } from 'grommet'\nimport QRCode from 'qrcode.react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport RoboPic from '../components/RoboPic'\n\nconst PopUpGive = (props) => (\n  <Layer\n    margin='medium'\n    onClickOutside={() => props.onClose()}\n    onEsc={() => props.onClose()}\n  >\n    <Box\n      overflow='auto'\n      border={{ color: 'brand', size: 'medium' }}\n      pad='large'\n      elevation='medium' \n      align='center'\n    >\n      <Box\n        direction='row-responsive'\n        align='end'\n        fill='horizontal'\n      >\n        <Button\n          label='X'\n          onClick={() => props.onClose()}\n        />\n      </Box>\n      <RoboPic roboId={props.robo.id} />\n      <Heading\n        textAlign='center'\n        level={1}\n      >\n        {props.robo.name}\n      </Heading>\n      <Box pad='medium'>\n        <QRCode value= {props.giveLink} /> \n      </Box>\n      <Box>\n        <CopyToClipboard\n          onCopy={() => props.onCopy()}\n          text={props.giveLink}\n        >\n          <Button\n            primary\n            label='Copy to clipboard'\n          />\n        </CopyToClipboard>\n      </Box>\n    </Box>\n  </Layer>\n);\n\nexport default PopUpGive;","\n\nexport class RobotService {\n  constructor(robotsContract) {\n    this.robotsContract = robotsContract\n  }\n\n  async robotsOf(owner) {\n    const numberOfRobots = await this.robotsContract.balanceOf(owner)\n    const robots = []\n    for(let i = 0; i < numberOfRobots; i++) {\n      robots.push((await this.robotsContract.tokenOfOwnerByIndex(owner, i)).toString())\n    }\n    return robots\n  }\n\n  async getAllRobots() {\n    const totalSupplyOfRobots = await this.robotsContract.totalSupply()\n    const robots = []\n    for (let i = 0; i < totalSupplyOfRobots; i++) {\n      robots.push((await this.robotsContract.tokenByIndex(i)).toString())\n    }\n    return robots\n  }\n\n  async ownerOf(id) {\n    return this.robotsContract.ownerOf(id)  \n  }\n}\n","import React, { Component } from 'react';\nimport { Box, Heading } from 'grommet';\nimport Header from '../components/Header';\nimport RobotCard from '../components/RobotCard';\nimport PopUpChallenge from '../components/PopUpChallenge';\nimport PopUpGive from '../components/PopUpGive'\nimport { RobotService } from '../services/RobotService'\nimport config from '../config'\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSelectOpponentModalOpen: false,\n      isGiveModalOpen: false,\n      myRobots: [],\n      allRobots: [],\n      loading: true,\n      giveLink: '',\n      selectedRobo: ''\n    }\n    this.roboService = new RobotService(this.props.contract)\n  }\n\n  async componentDidMount() {\n    this._updateRobos()\n    this.interval = setInterval(() => this._updateRobos(), 5000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  async _updateRobos() {\n    const myRobotIds = await this.roboService.robotsOf(this.props.identity.address)\n    const myRobots = myRobotIds\n      .map((id) => ({\n        id: id,\n        name: `Robo ${id}`\n      }))\n    this.setState({ myRobots , loading: false})\n    console.log('Updated robos')\n  }\n\n  _createGiveLink() {\n    const { identity, universalLoginSdk } = this.props\n    const tokenAddress = this.props.contract.address\n    const tokenId = this.state.selectedRobo.id\n    const giveLink = universalLoginSdk.createOnboardingLink(\n      `${config.frontend}/invite`,\n      identity.privateKey,\n      identity.name,\n      identity.address,\n      tokenAddress,\n      tokenId\n    )\n    this.setState({\n      isGiveModalOpen: true,\n      giveLink\n    })\n  }\n\n  async _openSelectOpponentModal() {\n    const allRobotIds = await this.roboService.getAllRobots(this.props.identity.address)\n    const allRobots = allRobotIds\n      .map(id => ({\n        id,\n        name: `Robo ${id}`\n      }))\n    this.setState({\n      isSelectOpponentModalOpen: true,\n      allRobots\n    })\n  }\n\n  _attackOpponent(opponentId) {\n    console.log('ATTACK', opponentId)\n  }\n\n  _openGiveModal(selectedRobo) {\n    this.setState({ selectedRobo }, () => {\n      this._createGiveLink()\n    })\n  }\n\n  _copyGiveLink(){\n    this.setState({ copied: true });\n  }\n\n  _closeModal() {\n    this.setState({\n      isSelectOpponentModalOpen: false,\n      isGiveModalOpen: false\n    })\n  }\n\n  render() {\n    return (\n      <Box>\n        <Header onClickLogout={this.props.onLogout} />\n        <Box pad=\"medium\">\n          <Heading level=\"3\">\n            Hello  {this.props.identity.name}!\n          </Heading>\n          <Heading level=\"4\">\n            <a href={`https://ropsten.etherscan.io/address/${this.props.identity.address}`}>{this.props.identity.address}</a>\n          </Heading>\n          {this.state.loading && \"Loading Robots...\"}\n          <Box direction= 'row-responsive' wrap>\n            {this.state.myRobots.map(robot=> (\n              <RobotCard\n                key={robot.id}\n                robot={robot}\n                onClickChallenge={this._openSelectOpponentModal.bind(this)}\n                onClickGive={this._openGiveModal.bind(this)}\n              />\n            ))}\n          </Box>\n        </Box>\n        {this.state.isSelectOpponentModalOpen && (\n          <PopUpChallenge\n            onClose={this._closeModal.bind(this)}\n            robots={this.state.allRobots}\n            onClickAttack={this._attackOpponent.bind(this)}\n          />\n        )}\n        {this.state.isGiveModalOpen && (\n          <PopUpGive\n            robo={this.state.selectedRobo}\n            giveLink={this.state.giveLink}\n            onCopy={this._copyGiveLink.bind(this)}              \n            onClose={this._closeModal.bind(this)}\n          />\n        )}\n      </Box>\n    )\n  }\n}\nexport default Home\n","import React, { Component } from 'react'\nimport EthereumIdentitySDK from 'universal-login-monorepo/universal-login-sdk'\nimport { providers, Contract } from 'ethers'\nimport publicIP from 'react-native-public-ip'\nimport { detect } from 'detect-browser'\nimport iplocation from 'iplocation'\nimport moment from 'moment'\nimport { Route, Redirect, withRouter } from 'react-router-dom'\n\nimport Login from './views/Login'\nimport Home from './views/Home'\nimport './App.css'\nimport RobotsWars from './contracts/Robots.json'\nimport config from './config.json'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      view: 'login',\n      name: ''\n    }\n    this.provider = new providers.JsonRpcProvider(config.rpcProvider)\n    this.sdk = new EthereumIdentitySDK(config.relayer, this.provider)\n    this.robotsWarsContractAddress = '0xc545cc75415e397fa3e52e90f738d11e485ce69b'\n    this.robotsWarsContract = new Contract(\n      this.robotsWarsContractAddress,\n      RobotsWars.abi,\n      this.provider\n    )\n    const identity = localStorage.getItem(\"identity\")\n    if (identity) {\n      this.identity = JSON.parse(identity)\n    }\n  }\n\n  componentDidMount = async () => {\n    try {\n      await this.sdk.start()\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Login View functions\n  async _getLabel() {\n    const ipAddress = await publicIP()\n    const browser = detect()\n    const { city } = await iplocation(ipAddress)\n    return {\n      ipAddress,\n      name: browser.name,\n      city,\n      time: moment().format('h:mm'),\n      os: browser.os,\n      version: browser.version\n    }\n  }\n\n  async _go(ensName, privateKey, address) {\n    if (!ensName) {\n      const ensDomain = this.state.name + '.tenz-id.xyz'\n      if (ensDomain === 'alice.tenz-id.xyz') {\n        this.identity = {\n          name: ensDomain,\n          privateKey: '0x34C09F237DCAA085C301D5148E024B9F04E8FC5603EE3B6E08C39AFE789E423A',\n          address: '0x502a1d30edb6e51261eedfcb41f6626c29ee6adc'/*'0x498208d7b2f695bd3f0162fcae6678253f819c2f'*/\n        }\n      }\n    } else {\n      this._setIdentity({\n        name: ensName,\n        address,\n        privateKey\n      })\n    }\n    localStorage.setItem('identity', JSON.stringify(this.identity))\n    this.props.history.push('/')\n    // try {\n    //   const identityAddress = await this.sdk.identityExist(ensDomain)\n    //   if (identityAddress) {\n    //     const privateKey = await this.sdk.connect(identityAddress, await this._getLabel())\n    //     this.identity = {\n    //       name: ensDomain,\n    //       privateKey,\n    //       address: identityAddress\n    //     }\n    //   } else {\n    //     const [ privateKey, address ] = await this.sdk.create(ensDomain)\n    //     this.identity = {\n    //       name: ensDomain,\n    //       privateKey,\n    //       address\n    //     }\n    //   }\n    //   this.props.history.push('/')\n    // } catch (error) {\n    //   console.error(error)\n    // }\n  }\n\n  _changeName(name) {\n    this.setState({ name })\n  }\n\n  _selectSuggestion(suggestion) {\n    this.setState({\n      name: suggestion.split('.')[0]\n    })\n  }\n\n  _logout() {\n    localStorage.removeItem('identity')\n    this.identity = null\n    this.setState({identity: this.identity})\n  }\n\n  _getNameSuggestions() {\n    const ensDomains = ['tenz-id.xyz']\n    if (this.state.name) {\n      return ensDomains.map(domain => `${this.state.name}.${domain}`)\n    }\n    return []\n  }\n\n  _navigateHome() {\n    this.props.history.push('/')\n  }\n\n  _setIdentity({ name, address, privateKey }) {\n    this.identity = {\n      name,\n      address,\n      privateKey\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%' }}>\n        <Route\n          exact\n          path='/'\n          render={() => (\n            !this.identity ? (\n              <Redirect to='/login'/>\n            ) : (\n              <Home\n                identity={this.identity}\n                universalLoginSdk={this.sdk}\n                rpcProvider={this.provider}\n                contract={this.robotsWarsContract}\n                onLogout={this._logout.bind(this)}\n              />\n            )\n          )}\n        />\n        <Route\n          path='/invite'\n          render={() => <Redirect to={`/login${this.props.location.search}`} />}\n        />\n        <Route\n          path='/login'\n          render={() =>\n            <Login\n              queryStringParams={this.props.location.search}\n              onClickGo={this._go.bind(this)}\n              onChangeName={this._changeName.bind(this)}\n              ensSuggestions={this._getNameSuggestions()}\n              onSelectSuggestion={this._selectSuggestion.bind(this)}\n              identity={this.identity}\n              universalLoginSdk={this.sdk}\n              provider={this.provider}\n              isNameSet={this.state.name !== ''}\n            />\n          }\n        />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}